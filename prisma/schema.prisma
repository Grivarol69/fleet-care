// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

enum Mant_Type {
  PREVENTIVO
  CORRECTIVO
  INSPECCION
}

enum Status {
  ACTIVE
  INACTIVE
}

enum Type_Plate {
  AMARILLA
  BLANCA
}

enum Type_Situation {
  DISPONIBLE
  RENTADO
  MANTENIMIENTO
}

enum Type_Owner {
  PROPIO
  NO_PROPIO
  TERCERO
}

enum Engine {
  GASOLINA
  DIESEL
  ACPM
  GNV
  ELECTRICO
}

model Category_Items {
  id          Int          @id @default(autoincrement())
  userId      String
  description String       @db.Text
  status      Status       @default(ACTIVE)
  items_mants Mant_Items[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Mant_Items {
  id          Int       @id @default(autoincrement())
  description String    @db.Text
  mant_type   Mant_Type
  idCategory  Int

  category_items Category_Items @relation(fields: [idCategory], references: [id], onDelete: Cascade)

  items_routine Items_Routine[]

  @@index([idCategory])
}

model Mant_Routines {
  id            Int             @id @default(autoincrement())
  description   String          @db.Text
  km_activate   Int
  items_routine Items_Routine[]
}

model Items_Routine {
  id        Int @id @default(autoincrement())
  routineId Int
  itemId    Int

  mant_items    Mant_Items    @relation(fields: [itemId], references: [id], onDelete: Cascade)
  mant_routines Mant_Routines @relation(fields: [routineId], references: [id], onDelete: Cascade)

  @@index([itemId])
  @@index([routineId])
}

model Mant_Plan {
  id          Int    @id @default(autoincrement())
  description String @db.Text
  vehicleId   Int
}

model Items_Plan {
  id Int @id @default(autoincrement())
}

model Vehicle_Brand {
  id       Int             @id @default(autoincrement())
  userId   String
  name     String          @db.Text
  status   Status          @default(ACTIVE)
  vehicles Model_Vehicle[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vehicle_Line {
  id       Int             @id @default(autoincrement())
  userId   String
  name     String          @db.Text
  status   Status          @default(ACTIVE)
  vehicles Model_Vehicle[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Vehicle_Type {
  id       Int             @id @default(autoincrement())
  userId   String
  name     String          @db.Text
  status   Status          @default(ACTIVE)
  vehicles Model_Vehicle[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Model_Vehicle {
  id      Int    @id @default(autoincrement())
  userId  String
  brandId Int
  lineId  Int
  typeId  Int
  year    Int
  engine  Engine
  wheels  Int
  status  Status @default(ACTIVE)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  brand Vehicle_Brand @relation(fields: [brandId], references: [id], onDelete: Cascade)
  line  Vehicle_Line  @relation(fields: [lineId], references: [id], onDelete: Cascade)
  type  Vehicle_Type  @relation(fields: [typeId], references: [id], onDelete: Cascade)

  // Nuevo campo para la relación 1:1
  vehicle Vehicle[]

  @@index([id])
  @@index([brandId])
  @@index([lineId])
  @@index([typeId])
}

model Vehicle {
  id             Int            @id @default(autoincrement())
  userId         String //usuario logueado Clerk
  modelVehicleId Int // Nuevo campo para la relación 1:1
  photo          String         @db.Text
  licensePlate   String         @unique //Placa identificatoria única
  typePlate      Type_Plate //Placa Amarilla o Blanca
  mileage        Int //kilometraje
  color          String         @db.Text
  owner          Type_Owner //Propio o Tercero
  year           Int
  status         Status         @default(ACTIVE)
  situation      Type_Situation //Habilitado - Mantenimiento

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Nuevo campo para la relación 1:1
  modelVehicle Model_Vehicle @relation(fields: [modelVehicleId], references: [id])

  @@index([modelVehicleId])
}

model Car {
  id           String   @id @default(uuid())
  userId       String
  name         String   @db.Text
  cv           String   @db.Text
  transmission String   @db.Text
  people       String   @db.Text
  photo        String   @db.Text
  priceDay     String   @db.Text
  engine       String   @db.Text
  type         String   @db.Text
  isPublish    Boolean?

  orders    Order[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Order {
  id           String   @id @default(uuid())
  carId        String   @db.Text
  carName      String   @db.Text
  userId       String   @db.Text
  orderDate    DateTime @default(now())
  orderEndDate DateTime @default(now())
  status       String   @db.Text
  totalAmount  String   @db.Text

  car Car @relation(fields: [carId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([carId])
  @@index([userId])
}
